#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_prefix:
	// no dupn needed
	callsub prefix
	int 1
	return

prefix:
	proto 0 0

	// tests/contracts/storage.algo.ts:20
	// this.boxMapWithPrefix.set('oo', 'bar')
	byte "f"
	byte "oo"
	concat
	dup
	box_del
	pop
	byte "bar"
	box_put
	retsub

abi_route_globalKeyPut:
	// no dupn needed
	callsub globalKeyPut
	int 1
	return

globalKeyPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:24
	// this.globalKey.set('bar')
	byte "foo"
	byte "bar"
	app_global_put
	retsub

abi_route_globalKeyGet:
	// no dupn needed
	callsub globalKeyGet
	int 1
	return

globalKeyGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:28
	// assert(this.globalKey.get() === 'bar')
	byte "foo"
	app_global_get
	byte "bar"
	==
	assert
	retsub

abi_route_globalKeyDelete:
	// no dupn needed
	callsub globalKeyDelete
	int 1
	return

globalKeyDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:32
	// this.globalKey.delete()
	byte "foo"
	app_global_del
	retsub

abi_route_globalKeyExists:
	// no dupn needed
	callsub globalKeyExists
	int 1
	return

globalKeyExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:36
	// this.globalKey.exists()
	txna Applications 0
	byte "foo"
	app_global_get_ex
	swap
	pop
	retsub

abi_route_localKeyPut:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localKeyPut
	int 1
	return

localKeyPut:
	proto 1 0

	// tests/contracts/storage.algo.ts:40
	// this.localKey.set(a, 'bar')
	frame_dig -1 // a: account
	byte "foo"
	byte "bar"
	app_local_put
	retsub

abi_route_localKeyGet:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localKeyGet
	int 1
	return

localKeyGet:
	proto 1 0

	// tests/contracts/storage.algo.ts:44
	// assert(this.localKey.get(a) === 'bar')
	frame_dig -1 // a: account
	byte "foo"
	app_local_get
	byte "bar"
	==
	assert
	retsub

abi_route_localKeyDelete:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localKeyDelete
	int 1
	return

localKeyDelete:
	proto 1 0

	// tests/contracts/storage.algo.ts:48
	// this.localKey.delete(a)
	frame_dig -1 // a: account
	byte "foo"
	app_local_del
	retsub

abi_route_localKeyExists:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localKeyExists
	int 1
	return

localKeyExists:
	proto 1 0

	// tests/contracts/storage.algo.ts:52
	// this.localKey.exists(a)
	frame_dig -1 // a: account
	txna Applications 0
	byte "foo"
	app_local_get_ex
	swap
	pop
	retsub

abi_route_boxKeyPut:
	// no dupn needed
	callsub boxKeyPut
	int 1
	return

boxKeyPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:56
	// this.boxKey.set('bar')
	byte "foo"
	byte "bar"
	box_put
	retsub

abi_route_boxKeyGet:
	// no dupn needed
	callsub boxKeyGet
	int 1
	return

boxKeyGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:60
	// assert(this.boxKey.get() === 'bar')
	byte "foo"
	box_get
	assert
	byte "bar"
	==
	assert
	retsub

abi_route_boxKeyDelete:
	// no dupn needed
	callsub boxKeyDelete
	int 1
	return

boxKeyDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:64
	// this.boxKey.delete()
	byte "foo"
	box_del
	retsub

abi_route_boxKeyExists:
	// no dupn needed
	callsub boxKeyExists
	int 1
	return

boxKeyExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:68
	// this.boxKey.exists()
	byte "foo"
	box_len
	swap
	pop
	retsub

abi_route_globalMapPut:
	// no dupn needed
	callsub globalMapPut
	int 1
	return

globalMapPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:72
	// this.globalMap.set('foo', 'bar')
	byte "foo"
	byte "bar"
	app_global_put
	retsub

abi_route_globalMapGet:
	// no dupn needed
	callsub globalMapGet
	int 1
	return

globalMapGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:76
	// assert(this.globalMap.get('foo') === 'bar')
	byte "foo"
	app_global_get
	byte "bar"
	==
	assert
	retsub

abi_route_globalMapDelete:
	// no dupn needed
	callsub globalMapDelete
	int 1
	return

globalMapDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:80
	// this.globalMap.delete('foo')
	byte "foo"
	app_global_del
	retsub

abi_route_globalMapExists:
	// no dupn needed
	callsub globalMapExists
	int 1
	return

globalMapExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:84
	// this.globalMap.exists('foo')
	txna Applications 0
	byte "foo"
	app_global_get_ex
	swap
	pop
	retsub

abi_route_localMapPut:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localMapPut
	int 1
	return

localMapPut:
	proto 1 0

	// tests/contracts/storage.algo.ts:88
	// this.localMap.set(a, 'foo', 'bar')
	frame_dig -1 // a: account
	byte "foo"
	byte "bar"
	app_local_put
	retsub

abi_route_localMapGet:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localMapGet
	int 1
	return

localMapGet:
	proto 1 0

	// tests/contracts/storage.algo.ts:92
	// assert(this.localMap.get(a, 'foo') === 'bar')
	frame_dig -1 // a: account
	byte "foo"
	app_local_get
	byte "bar"
	==
	assert
	retsub

abi_route_localMapDelete:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localMapDelete
	int 1
	return

localMapDelete:
	proto 1 0

	// tests/contracts/storage.algo.ts:96
	// this.localMap.delete(a, 'foo')
	frame_dig -1 // a: account
	byte "foo"
	app_local_del
	retsub

abi_route_localMapExists:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub localMapExists
	int 1
	return

localMapExists:
	proto 1 0

	// tests/contracts/storage.algo.ts:100
	// this.localMap.exists(a, 'foo')
	frame_dig -1 // a: account
	txna Applications 0
	byte "foo"
	app_local_get_ex
	swap
	pop
	retsub

abi_route_boxMapPut:
	// no dupn needed
	callsub boxMapPut
	int 1
	return

boxMapPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:104
	// this.boxMap.set('foo', 'bar')
	byte "foo"
	byte "bar"
	box_put
	retsub

abi_route_boxMapGet:
	// no dupn needed
	callsub boxMapGet
	int 1
	return

boxMapGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:108
	// assert(this.boxMap.get('foo') === 'bar')
	byte "foo"
	box_get
	assert
	byte "bar"
	==
	assert
	retsub

abi_route_boxMapDelete:
	// no dupn needed
	callsub boxMapDelete
	int 1
	return

boxMapDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:112
	// this.boxMap.delete('foo')
	byte "foo"
	box_del
	retsub

abi_route_boxMapExists:
	// no dupn needed
	callsub boxMapExists
	int 1
	return

boxMapExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:116
	// this.boxMap.exists('foo')
	byte "foo"
	box_len
	swap
	pop
	retsub

abi_route_boxKeyCreate:
	// no dupn needed
	callsub boxKeyCreate
	int 1
	return

boxKeyCreate:
	proto 0 0

	// tests/contracts/storage.algo.ts:120
	// this.boxKey.create(1024)
	byte "foo"
	int 1024
	box_create
	retsub

abi_route_boxMapCreate:
	// no dupn needed
	callsub boxMapCreate
	int 1
	return

boxMapCreate:
	proto 0 0

	// tests/contracts/storage.algo.ts:124
	// this.boxMap.create('bar', 1024)
	byte "bar"
	int 1024
	box_create
	retsub

abi_route_boxKeyLength:
	// no dupn needed
	callsub boxKeyLength
	int 1
	return

boxKeyLength:
	proto 0 0

	// tests/contracts/storage.algo.ts:128
	// return this.boxKey.size();
	byte "foo"
	box_len
	assert
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_boxMapLength:
	// no dupn needed
	callsub boxMapLength
	int 1
	return

boxMapLength:
	proto 0 0

	// tests/contracts/storage.algo.ts:132
	// return this.boxMap.size('bar');
	byte "bar"
	box_len
	assert
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_boxKeyReplace:
	// no dupn needed
	callsub boxKeyReplace
	int 1
	return

boxKeyReplace:
	proto 0 0

	// tests/contracts/storage.algo.ts:136
	// this.boxKey.replace(0, 'abc')
	byte "foo"
	int 0
	byte "abc"
	box_replace
	retsub

abi_route_boxMapReplace:
	// no dupn needed
	callsub boxMapReplace
	int 1
	return

boxMapReplace:
	proto 0 0

	// tests/contracts/storage.algo.ts:140
	// this.boxMap.replace('bar', 0, 'abc')
	byte "bar"
	int 0
	byte "abc"
	box_replace
	retsub

abi_route_boxKeyExtract:
	// no dupn needed
	callsub boxKeyExtract
	int 1
	return

boxKeyExtract:
	proto 0 0

	// tests/contracts/storage.algo.ts:144
	// return this.boxKey.extract(0, 3);
	byte "foo"
	int 0
	int 3
	box_extract
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_boxMapExtract:
	// no dupn needed
	callsub boxMapExtract
	int 1
	return

boxMapExtract:
	proto 0 0

	// tests/contracts/storage.algo.ts:148
	// return this.boxMap.extract('bar', 0, 3);
	byte "bar"
	int 0
	int 3
	box_extract
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	switch abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "prefix()void"
	method "globalKeyPut()void"
	method "globalKeyGet()void"
	method "globalKeyDelete()void"
	method "globalKeyExists()void"
	method "localKeyPut(account)void"
	method "localKeyGet(account)void"
	method "localKeyDelete(account)void"
	method "localKeyExists(account)void"
	method "boxKeyPut()void"
	method "boxKeyGet()void"
	method "boxKeyDelete()void"
	method "boxKeyExists()void"
	method "globalMapPut()void"
	method "globalMapGet()void"
	method "globalMapDelete()void"
	method "globalMapExists()void"
	method "localMapPut(account)void"
	method "localMapGet(account)void"
	method "localMapDelete(account)void"
	method "localMapExists(account)void"
	method "boxMapPut()void"
	method "boxMapGet()void"
	method "boxMapDelete()void"
	method "boxMapExists()void"
	method "boxKeyCreate()void"
	method "boxMapCreate()void"
	method "boxKeyLength()uint64"
	method "boxMapLength()uint64"
	method "boxKeyReplace()void"
	method "boxMapReplace()void"
	method "boxKeyExtract()string"
	method "boxMapExtract()string"
	txna ApplicationArgs 0
	match abi_route_prefix abi_route_globalKeyPut abi_route_globalKeyGet abi_route_globalKeyDelete abi_route_globalKeyExists abi_route_localKeyPut abi_route_localKeyGet abi_route_localKeyDelete abi_route_localKeyExists abi_route_boxKeyPut abi_route_boxKeyGet abi_route_boxKeyDelete abi_route_boxKeyExists abi_route_globalMapPut abi_route_globalMapGet abi_route_globalMapDelete abi_route_globalMapExists abi_route_localMapPut abi_route_localMapGet abi_route_localMapDelete abi_route_localMapExists abi_route_boxMapPut abi_route_boxMapGet abi_route_boxMapDelete abi_route_boxMapExists abi_route_boxKeyCreate abi_route_boxMapCreate abi_route_boxKeyLength abi_route_boxMapLength abi_route_boxKeyReplace abi_route_boxMapReplace abi_route_boxKeyExtract abi_route_boxMapExtract
	err