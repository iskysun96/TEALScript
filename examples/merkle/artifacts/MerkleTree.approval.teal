#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_DeleteApplication call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_DeleteApplication

NOT_IMPLEMENTED:
	err

calcInitRoot:
	proto 2 1

	// examples/merkle/merkle.algo.ts:19
	// result = EMPTY_HASH
	// examples/merkle/merkle.algo.ts:6
	// hex('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855')
	byte 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
	frame_bury -1 // result: byte[32]

	// examples/merkle/merkle.algo.ts:21
	// i = 0
	int 0
	frame_bury -2 // i: uint64

for_0:
	frame_dig -2 // i: uint64
	int 3
	<
	bz for_0_end

	// examples/merkle/merkle.algo.ts:22
	// result = sha256(result + result)
	frame_dig -1 // result: byte[32]
	frame_dig -1 // result: byte[32]
	concat
	sha256
	frame_bury -1 // result: byte[32]

	// examples/merkle/merkle.algo.ts:21
	// i = i + 1
	frame_dig -2 // i: uint64
	int 1
	+
	frame_bury -2 // i: uint64
	b for_0

for_0_end:
	// examples/merkle/merkle.algo.ts:25
	// return result;
	frame_dig -1 // result: byte[32]
	retsub

hashConcat:
	proto 2 1

	// examples/merkle/merkle.algo.ts:29
	// return sha256(left + right);
	frame_dig -1 // left: byte[32]
	frame_dig -2 // right: byte[32]
	concat
	sha256
	retsub

isRightSibling:
	proto 1 1

	// examples/merkle/merkle.algo.ts:33
	// return getbyte(elem, 0) === RIGHT_SIBLING_PREFIX;
	frame_dig -1 // elem: byte[33]
	int 0
	getbyte
	int 170
	==
	retsub

calcRoot:
	proto 4 1

	// examples/merkle/merkle.algo.ts:39
	// i = 0
	int 0
	frame_bury -3 // i: uint64

for_1:
	frame_dig -3 // i: uint64
	int 3
	<
	bz for_1_end
	frame_dig -3 // i: uint64
	frame_bury -4 // accessor: accessor//0//elem

	// if0_condition
	// examples/merkle/merkle.algo.ts:42
	// this.isRightSibling(elem)
	// no dupn needed
	frame_dig -2 // path: byte[33][3]
	store 0 // full array
	int 0 // initial offset
	frame_dig -4 // saved accessor: accessor//0//elem
	int 33
	* // acc * typeLength
	+
	load 0 // full array
	swap
	int 33
	extract3
	callsub isRightSibling
	bz if0_else

	// if0_consequent
	// examples/merkle/merkle.algo.ts:43
	// result = this.hashConcat(result, extract3(elem, 1, 32))
	// no dupn needed
	frame_dig -2 // path: byte[33][3]
	store 0 // full array
	int 0 // initial offset
	frame_dig -4 // saved accessor: accessor//0//elem
	int 33
	* // acc * typeLength
	+
	load 0 // full array
	swap
	int 33
	extract3
	int 1
	int 32
	extract3
	frame_dig -1 // leaf: byte[32]
	callsub hashConcat
	frame_bury -1 // result: byte[32]
	b if0_end

if0_else:
	// examples/merkle/merkle.algo.ts:45
	// result = this.hashConcat(extract3(elem, 1, 32), result)
	// no dupn needed
	frame_dig -1 // leaf: byte[32]
	frame_dig -2 // path: byte[33][3]
	store 0 // full array
	int 0 // initial offset
	frame_dig -4 // saved accessor: accessor//0//elem
	int 33
	* // acc * typeLength
	+
	load 0 // full array
	swap
	int 33
	extract3
	int 1
	int 32
	extract3
	callsub hashConcat
	frame_bury -1 // result: byte[32]

if0_end:
	// examples/merkle/merkle.algo.ts:39
	// i = i + 1
	frame_dig -3 // i: uint64
	int 1
	+
	frame_bury -3 // i: uint64
	b for_1

for_1_end:
	// examples/merkle/merkle.algo.ts:49
	// return result;
	frame_dig -1 // leaf: byte[32]
	retsub

abi_route_deleteApplication:
	// no dupn needed
	callsub deleteApplication
	int 1
	return

deleteApplication:
	proto 0 0

	// examples/merkle/merkle.algo.ts:53
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert
	retsub

abi_route_createApplication:
	// no dupn needed
	callsub createApplication
	int 1
	return

createApplication:
	proto 0 0

	// examples/merkle/merkle.algo.ts:57
	// this.root.set(this.calcInitRoot())
	byte "root"
	byte 0x; dup
	callsub calcInitRoot
	app_global_put
	retsub

abi_route_verify:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	extract 2 0
	callsub verify
	int 1
	return

verify:
	proto 2 0

	// examples/merkle/merkle.algo.ts:61
	// assert(this.root.get() === this.calcRoot(sha256(data), path))
	byte "root"
	app_global_get
	byte 0x; dup
	frame_dig -2 // path: byte[33][3]
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	==
	assert
	retsub

abi_route_appendLeaf:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	extract 2 0
	callsub appendLeaf
	int 1
	return

appendLeaf:
	proto 2 0

	// examples/merkle/merkle.algo.ts:65
	// assert(data !== '')
	frame_dig -1 // data: bytes
	byte ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:66
	// assert(this.root.get() === this.calcRoot(EMPTY_HASH, path))
	byte "root"
	app_global_get
	byte 0x; dup
	frame_dig -2 // path: byte[33][3]

	// examples/merkle/merkle.algo.ts:6
	// hex('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855')
	byte 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:68
	// this.root.set(this.calcRoot(sha256(data), path))
	byte "root"
	byte 0x; dup
	frame_dig -2 // path: byte[33][3]
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	app_global_put

	// examples/merkle/merkle.algo.ts:70
	// this.size.set(this.size.get() + 1)
	byte "size"
	byte "size"
	app_global_get
	int 1
	+
	app_global_put
	retsub

abi_route_updateLeaf:
	// no dupn needed
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub updateLeaf
	int 1
	return

updateLeaf:
	proto 3 0

	// examples/merkle/merkle.algo.ts:74
	// assert(newData !== '')
	frame_dig -2 // newData: bytes
	byte ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:75
	// assert(this.root.get() === this.calcRoot(sha256(oldData), path))
	byte "root"
	app_global_get
	byte 0x; dup
	frame_dig -3 // path: byte[33][3]
	frame_dig -1 // oldData: bytes
	sha256
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:77
	// this.root.set(this.calcRoot(sha256(newData), path))
	byte "root"
	byte 0x; dup
	frame_dig -3 // path: byte[33][3]
	frame_dig -2 // newData: bytes
	sha256
	callsub calcRoot
	app_global_put
	retsub

create_NoOp:
	txn NumAppArgs
	switch abi_route_createApplication
	err

call_NoOp:
	method "verify(byte[],byte[33][3])void"
	method "appendLeaf(byte[],byte[33][3])void"
	method "updateLeaf(byte[],byte[],byte[33][3])void"
	txna ApplicationArgs 0
	match abi_route_verify abi_route_appendLeaf abi_route_updateLeaf
	err

create_DeleteApplication:
	err

call_DeleteApplication:
	txn NumAppArgs
	switch abi_route_deleteApplication
	err