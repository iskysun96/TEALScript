#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_setMyContact:
	byte 0x
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub setMyContact
	int 1
	return

setMyContact:
	proto 3 0

	// examples/tuple_in_box/app.algo.ts:12
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -3 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:14
	// this.myContact.set(contact)
	byte "myContact"
	frame_dig -3 // contact: Contact
	app_global_put

	// examples/tuple_in_box/app.algo.ts:15
	// this.contacts.set(this.txn.sender, contact)
	txn Sender
	dup
	box_del
	pop
	frame_dig -3 // contact: Contact
	box_put
	retsub

abi_route_addContact:
	byte 0x
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub addContact
	int 1
	return

addContact:
	proto 4 0

	// examples/tuple_in_box/app.algo.ts:19
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -4 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:20
	// this.contacts.set(address, contact)
	frame_dig -3 // address: address
	dup
	box_del
	pop
	frame_dig -4 // contact: Contact
	box_put
	retsub

abi_route_updateContactField:
	// no dupn needed
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub updateContactField
	int 1
	return

updateContactField:
	proto 3 0

	// if0_condition
	// examples/tuple_in_box/app.algo.ts:24
	// field === 'name'
	frame_dig -1 // field: bytes
	byte "name"
	==
	bz if0_elseif1_condition

	// if0_consequent
	// examples/tuple_in_box/app.algo.ts:25
	// this.contacts.get(address).name = value
	frame_dig -3 // address: address
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 0 // headOffset
	+
	dup
	store 4 // element head offset
	load 0 // full array
	load 0 // full array
	uncover 2
	extract_uint16
	dup
	store 1 // element start
	dup // duplicate start of element
	load 0 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 2 // element length
	load 0 // full array
	int 0
	load 1 // element start
	substring3
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 3 // new element
	load 0 // full array
	load 1 // element start
	load 2 // element length
	+ // get end of Element
	load 0 // full array
	len
	substring3
	concat
	concat
	store 0 // full array
	callsub get_length_difference
	load 5 // length difference
	load 4 // element head offset
	int 2
	+ // head ofset
	callsub update_dynamic_head
	load 0 // full array
	frame_dig -3 // address: address
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_elseif1_condition:
	// examples/tuple_in_box/app.algo.ts:26
	// field === 'company'
	frame_dig -1 // field: bytes
	byte "company"
	==
	bz if0_else

	// if0_elseif1_consequent
	// examples/tuple_in_box/app.algo.ts:27
	// this.contacts.get(address).company = value
	frame_dig -3 // address: address
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 2 // headOffset
	+
	dup
	store 4 // element head offset
	load 0 // full array
	load 0 // full array
	uncover 2
	extract_uint16
	dup
	store 1 // element start
	dup // duplicate start of element
	load 0 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 2 // element length
	load 0 // full array
	int 0
	load 1 // element start
	substring3
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 3 // new element
	load 0 // full array
	load 1 // element start
	load 2 // element length
	+ // get end of Element
	load 0 // full array
	len
	substring3
	concat
	concat
	store 0 // full array
	callsub get_length_difference
	load 0 // full array
	frame_dig -3 // address: address
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	err // 'Invalid field'

if0_end:
	retsub

abi_route_verifyContactName:
	// no dupn needed
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	extract 2 0
	callsub verifyContactName
	int 1
	return

verifyContactName:
	proto 2 0

	// examples/tuple_in_box/app.algo.ts:32
	// assert(this.contacts.get(address).name === name)
	frame_dig -2 // address: address
	box_get
	assert
	frame_dig -2 // address: address
	box_get
	assert
	store 0 // full array
	int 0 // initial offset
	int 0 // headOffset
	+
	load 0 // full array
	load 0 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 0 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	extract3
	extract 2 0
	frame_dig -1 // name: bytes
	==
	assert
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	switch abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "setMyContact(string,string)void"
	method "addContact(string,string,address)void"
	method "updateContactField(string,string,address)void"
	method "verifyContactName(string,address)void"
	txna ApplicationArgs 0
	match abi_route_setMyContact abi_route_addContact abi_route_updateContactField abi_route_verifyContactName
	err

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 0 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 7 // subtract head difference
	bz subtract_head_difference
	+ // add difference to offset
	b end_calc_new_head

subtract_head_difference:
	swap
	- // subtract difference from offet

end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 0 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 0 // full array
	retsub

get_length_difference:
	load 3 // new element
	len // length of new element
	load 2 // element length
	<
	bnz swapped_difference
	load 3 // new element
	len // length of new element
	load 2 // element length
	int 1
	store 7 // subtract head difference
	b get_difference

swapped_difference:
	load 2 // element length
	load 3 // new element
	len // length of new element
	int 0
	store 7 // subtract head difference

get_difference:
	- // get length difference
	store 5 // length difference
	retsub